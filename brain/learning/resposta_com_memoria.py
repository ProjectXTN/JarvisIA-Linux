import re
from brain.learning.consultar_memoria import consultar_memoria, consultar_tudo
from brain.memoria import DEFAULT_MODEL,DEFAULT_MODEL_HIGH, generate_response


def generate_contextual_response(pergunta, modelo=DEFAULT_MODEL):
    # Detecta se a pergunta √© sobre c√≥digo de programa√ß√£o
    dev_codigo = any(p in pergunta.lower() for p in [
        "c√≥digo", "script", "fun√ß√£o", "programa",
        "html", "css", "javascript", "python",
        "classe",
    ])

    # Se for pedido de c√≥digo, for√ßamos o modelo high (LLaMA 3.3)
    modelo = DEFAULT_MODEL_HIGH if dev_codigo else modelo

    match = re.search(r"sobre\s+(.+)", pergunta.lower())
    assunto = match.group(1).strip() if match else pergunta.strip().lower()

    conhecimento = consultar_memoria(assunto)

    if conhecimento:
        print(f"[üîç CONTEXTO] Conhecimento pr√©-existente encontrado sobre '{assunto}'.")

    if dev_codigo:
        prompt = (
            f"Gere apenas o c√≥digo-fonte para: {pergunta}\n"
            f"N√£o adicione coment√°rios, explica√ß√µes, t√≠tulo, introdu√ß√£o ou conclus√£o.\n"
            f"Use quebras de linha, indenta√ß√£o e escopo correto. Escreva o c√≥digo como se fosse colado diretamente num editor de c√≥digo.\n"
            f"N√£o coloque a linguagem ('python', 'javascript', etc.) no in√≠cio.\n"
            f"Retorne apenas um √∫nico bloco de c√≥digo v√°lido entre crases triplas (```), sem texto fora dele."
        )
    else:
        prompt = (
            f"Voc√™ √© Jarvis, um assistente que responde com base no que j√° aprendeu.\n\n"
            f"Conhecimento armazenado sobre '{assunto}':\n{conhecimento}\n\n"
            f"Pergunta: {pergunta}\n"
            f"Responda de forma clara, objetiva e apenas com base no que voc√™ sabe.\n"
        )

    return generate_response(prompt, modelo)


def responder_com_inferencia(pergunta, modelo=DEFAULT_MODEL):
    dev_codigo = any(p in pergunta.lower() for p in ["c√≥digo", "script", "fun√ß√£o", "programa", "html", "css", "javascript", "python", "classe", "crie", "fa√ßa"])

    if dev_codigo:
        prompt = (
            f"Gere apenas o c√≥digo-fonte para: {pergunta}\n"
            f"N√£o adicione coment√°rios, explica√ß√µes, t√≠tulo, introdu√ß√£o ou conclus√£o.\n"
            f"Retorne apenas o bloco de c√≥digo entre crases triplas no formato da linguagem."
        )
        return generate_response(prompt, modelo)

    topicos = re.findall(
        r"\b(?:intelig√™ncia artificial|rob√≥tica|blockchain|energia renov√°vel|biotecnologia|computa√ß√£o qu√¢ntica|aumento da popula√ß√£o)\b",
        pergunta.lower()
    )
    topicos = list(set(topicos))

    if not topicos:
        print("[üß† INFER√äNCIA] Nenhum t√≥pico identificado na pergunta. Usando modelo direto como fallback final.")
        prompt = (
            f"Voc√™ √© Jarvis, um assistente que responde perguntas com base em conhecimento amplo.\n"
            f"Pergunta: {pergunta}\n"
            f"Responda de forma objetiva e clara em portugu√™s."
        )
        return generate_response(prompt, modelo)

    conhecimentos = []
    for topico in topicos:
        conteudo = consultar_memoria(topico)
        if conteudo:
            conhecimentos.append((topico, conteudo))
            print(f"[üß† INFER√äNCIA] Conhecimento encontrado: '{topico}'")
        else:
            print(f"[‚ùå INFER√äNCIA] Nenhum dado salvo sobre: '{topico}'")

    if not conhecimentos:
        print("[üß† INFER√äNCIA] Nenhuma base de conhecimento foi encontrada. Usando modelo direto como fallback final.")
        prompt = (
            f"Voc√™ √© Jarvis, um assistente que responde perguntas com base em conhecimento amplo.\n"
            f"Pergunta: {pergunta}\n"
            f"Responda de forma objetiva e clara em portugu√™s."
        )
        return generate_response(prompt, modelo)

    contexto = "\n\n".join(
        f"[{titulo.upper()}]\n{texto}" for titulo, texto in conhecimentos
    )

    prompt = (
        f"Voc√™ √© Jarvis, um assistente que responde com base no que j√° aprendeu.\n\n"
        f"Abaixo est√£o informa√ß√µes que voc√™ j√° aprendeu:\n\n{contexto}\n\n"
        f"Pergunta: {pergunta}\n"
        f"Use o que aprendeu para responder de forma objetiva e em portugu√™s."
    )

    print(f"[üß† INFER√äNCIA] Gerando resposta com base em m√∫ltiplos conhecimentos...")
    return generate_response(prompt, modelo)
